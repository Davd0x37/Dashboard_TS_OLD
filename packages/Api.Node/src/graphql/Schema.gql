schema {
  query: Query
  mutation: Mutation
}

type Query {
  # Authenticate user by his login and password
  authenticateUser(login: String!, password: String!): User
  # Get all users - returns array
  getAllUsers: [User]!
}

type Mutation {
  # Add user to database
  addUser(data: UserInput!): Boolean
  # Change password
  changePassword(id: ID, password: String, newPassword: String): Boolean
  # Update user info
  updateUserData(id: ID!): Services!
  # Update digitalocean token
  updateDigitalOceanToken(id: ID!, token: String!): Boolean
}

type User {
  id: ID
  user: UserDetails
  DigitalOcean: DigitalOcean
  Spotify: Spotify
  Paypal: Paypal
}

type UserDetails {
  avatar: String
  email: String
  login: String
}

input UserInput {
  avatar: String
  email: String!
  login: String!
  password: String!
}

type Services {
  DigitalOcean: DigitalOcean
  Spotify: Spotify
  Paypal: Paypal
}

type Spotify {
  email: String!
  username: String!
  type: String!
}

type DigitalOcean {
  email: String!
  total: String!
  dropletLimit: String!
  lastCreatedDroplet: String!
}

type Paypal {
  username: String!
  email: String!
  phone: String!
  verified: String!
  country: String!
  zoneinfo: String!
}
